type Query {
  appName: String
  allProducts: [Product!]!
  productsByAuthor(authorName: String!): [Product!]!
  productsByCategory(slug: String!): [Product!]!
  }

type Product {
  name: String!
  description: String!
  url: String!
  numberOfVotes: Int!
  publishedAt: String!
  author: User!
  categories: [Category]!
}

type User {
  id: ID!
  userName: String!
  fullName: String!
}

type Category {
  id: ID!
  slug: String!
  name: String!
}

type Mutation {
  createProduct(input: NewProduct!): Product!
  changeUserStatus(
    input: ChangeUserStatusInput!
  ): ChangeUserStatusPayload
}

input ChangeUserStatusInput {
  clientMutationId: String
  emoji: String
  expiresAt: DateTime
  limitedAvailability: Boolean = false
  message: String
  organizationId: ID @possibleTypes(concreteTypes: ["Organization"])
}

type ChangeUserStatusPayload {
  clientMutationId: String
  status: UserStatus
}

input NewProduct {
  name: String!
  description: String!
  url: String!
  categoriesIds: [ID!]!
}
